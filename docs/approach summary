Make sure you have written your own README that briefly explains your approach to solving the challenge.

Approach:
Create domain models from user stories, one by one
Create and fail tests for each domain model
Write code to pass each test
-planes - carry info about landing status; send messages to airport when landed; receive takeoff/land permission from airport
-airports - carry capacity info; check weather info; receive plane info; send takeoff/land permit to planes based on weather, capacity
-weather - contains random state (i.e. stormy? true/false)

Test scopes:
Plane landing (conditions)
Plane takeoff (conditions)
Plane status reporting
Airport information
Messages sent and received by airports
Weather

If your code isn't finished it's not ideal but acceptable as long as you explain in your README
where you got to and how you would plan to finish the challenge.
The above is a relatively straightforward thing to do that doesn't involve much programming -
I'll often get it done while thinking about other problems in the back of my mind :-)

We have a request from a client to write the software to control the flow of planes at an airport.
The planes can land and take off provided that the weather is sunny. Occasionally it may be stormy,
in which case no planes can land or take off. Here are the user stories that we worked out in collaboration with the client:

Your task is to test drive the creation of a set of classes/modules to satisfy all the above user stories.
You will need to use a random number generator to set the weather (it is normally sunny but on rare occasions it may be stormy).
In your tests, you'll need to use a stub to override random weather to ensure consistent test behaviour.
